"use client";

import { useState, useEffect } from "react";
import { doc, getDoc, setDoc } from "firebase/firestore";
import { db } from "@/lib/firebase";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { X, Plus, Save } from "lucide-react";

export function CategoriesManagement() {
  const [categories, setCategories] = useState<string[]>([]);
  const [newCategory, setNewCategory] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Firestore
  useEffect(() => {
    const loadCategories = async () => {
      try {
        setIsLoading(true);
        const categoriesDoc = await getDoc(doc(db, "settings", "categories"));
        if (categoriesDoc.exists()) {
          const data = categoriesDoc.data();
          setCategories(data.list || []);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
      } finally {
        setIsLoading(false);
      }
    };

    loadCategories();
  }, []);

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  const addCategory = () => {
    if (newCategory.trim() && !categories.includes(newCategory.trim())) {
      setCategories([...categories, newCategory.trim()]);
      setNewCategory("");
    }
  };

  // –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  const removeCategory = (categoryToRemove: string) => {
    setCategories(categories.filter(cat => cat !== categoryToRemove));
  };

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Firestore
  const saveCategories = async () => {
    try {
      setIsSaving(true);
      await setDoc(doc(db, "settings", "categories"), {
        list: categories,
        updatedAt: new Date()
      });
      alert("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
      alert("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
    } finally {
      setIsSaving(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-zinc-400">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      <Card className="bg-[#18181B] border-zinc-700">
        <CardHeader>
          <CardTitle className="text-white">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          <div className="flex gap-2">
            <Input
              value={newCategory}
              onChange={(e) => setNewCategory(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
              className="bg-[#27272A] border-zinc-700 text-white"
              onKeyPress={(e) => e.key === "Enter" && addCategory()}
            />
            <Button
              onClick={addCategory}
              disabled={!newCategory.trim() || categories.includes(newCategory.trim())}
              className="bg-blue-600 hover:bg-blue-700"
            >
              <Plus className="w-4 h-4 mr-1" />
              –î–æ–±–∞–≤–∏—Ç—å
            </Button>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
          <div className="space-y-2">
            <h3 className="text-sm font-medium text-zinc-300">
              –¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({categories.length}):
            </h3>
            <div className="flex flex-wrap gap-2">
              {categories.length === 0 ? (
                <div className="text-zinc-500 text-sm">–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π</div>
              ) : (
                categories.map((category, index) => (
                  <Badge
                    key={index}
                    variant="secondary"
                    className="bg-[#27272A] text-white border-zinc-700 px-3 py-1 text-sm"
                  >
                    {category}
                    <button
                      onClick={() => removeCategory(category)}
                      className="ml-2 text-zinc-400 hover:text-red-400 transition-colors"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                ))
              )}
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
          <div className="pt-4">
            <Button
              onClick={saveCategories}
              disabled={isSaving}
              className="bg-green-600 hover:bg-green-700"
            >
              <Save className="w-4 h-4 mr-1" />
              {isSaving ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"}
            </Button>
          </div>

          {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
          <div className="text-xs text-zinc-500 mt-4">
            <p>üí° <strong>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–õ–∏–¥–µ—Ä—ã –ø—Ä–æ–¥–∞–∂".</p>
            <p>‚Ä¢ –ù–∞–∂–º–∏—Ç–µ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</p>
            <p>‚Ä¢ –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ ‚úï —Ä—è–¥–æ–º —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –¥–ª—è –µ—ë —É–¥–∞–ª–µ–Ω–∏—è</p>
            <p>‚Ä¢ –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è!</p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
